// SPDX-License-Identifier: AGPL v3
pragma solidity ^0.8.23;

import { BaseMerkleDistributor } from "./BaseMerkleDistributor.sol";
import { IERC721SafeMintable } from "../interfaces/IERC721SafeMintable.sol";

contract ERC721MerkleDistributor is BaseMerkleDistributor {
    /// @custom:storage-location erc7201:ethsign.misc.erc721merkledistributor
    struct ERC721MerkleDistributorStorage {
        mapping(string group => mapping(bytes32 leaf => bool used)) usedLeafs;
        IERC721SafeMintable token;
    }

    // keccak256(abi.encode(uint256(keccak256("ethsign.misc.erc721merkledistributor")) - 1)) & ~bytes32(uint256(0xff))
    bytes32 private constant ERC721MerkleDistributorStorageLocation =
        0x1741da4b9f1348c97566d62bae93ce9c81fb3eba29bfb4db3ba7fc08f957dc00;

    function _getERC721MerkleDistributorStorage() internal pure returns (ERC721MerkleDistributorStorage storage $) {
        assembly {
            $.slot := ERC721MerkleDistributorStorageLocation
        }
    }

    function encodeLeafFor(address user, bytes memory data) public view virtual override returns (bytes32) {
        return keccak256(abi.encode(address(this), user));
    }

    function _isLeafUsed(string calldata group, bytes32 leaf) internal view virtual override returns (bool) {
        ERC721MerkleDistributorStorage storage $ = _getERC721MerkleDistributorStorage();
        return $.usedLeafs[group][leaf];
    }
}
