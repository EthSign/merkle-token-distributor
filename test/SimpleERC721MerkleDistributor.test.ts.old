/* eslint-disable multiline-comment-style */
/* eslint-disable @typescript-eslint/no-unsafe-member-access */
/* eslint-disable @typescript-eslint/no-unsafe-assignment */
/* eslint-disable @typescript-eslint/no-unsafe-call */
/* eslint-disable no-console */
/* eslint-disable no-mixed-operators */
import {ethers} from 'hardhat'
import {expect} from 'chai'
import '@nomicfoundation/hardhat-chai-matchers'
import {HardhatEthersSigner} from '@nomicfoundation/hardhat-ethers/signers'
import {SimpleERC721MerkleDistributor} from '../typechain-types'
import {StandardMerkleTree} from '@openzeppelin/merkle-tree'

describe('SimpleERC721MerkleDistributor', () => {
    const projectId = 'test id'
    let instance: SimpleERC721MerkleDistributor,
        owner: HardhatEthersSigner,
        alice: HardhatEthersSigner,
        bob: HardhatEthersSigner,
        charlie: HardhatEthersSigner,
        donald: HardhatEthersSigner,
        emma: HardhatEthersSigner,
        merkleLeaves: string[],
        merkleRoot: string,
        merkleTree: StandardMerkleTree<string[]>

    before(async () => {
        ;[owner, alice, bob, charlie, donald, emma] = await ethers.getSigners()
    })

    beforeEach(async () => {
        const SimpleERC721MerkleDistributorFactory =
            await ethers.getContractFactory('SimpleERC721MerkleDistributor')
        instance = await SimpleERC721MerkleDistributorFactory.deploy()
        await instance.initialize(projectId)
        const instanceAddress = await instance.getAddress()
        const recipientArray = [owner, alice, bob, charlie, donald, emma]
        merkleLeaves = recipientArray.map((recipient) =>
            ethers.keccak256(
                ethers.AbiCoder.defaultAbiCoder().encode(
                    ['address', 'address', 'bytes32', 'bytes'],
                    [
                        instanceAddress,
                        recipient.address,
                        ethers.ZeroHash,
                        ethers.AbiCoder.defaultAbiCoder().encode(
                            ['uint256', 'uint256', 'uint256'],
                            [0, 0, 1]
                        )
                    ]
                )
            )
        )
        merkleTree = StandardMerkleTree.of([merkleLeaves], ['bytes32'])
        merkleRoot = merkleTree.root
    })

    it('test', async () => {
        const encodedTokenTableMerkleDistributorData =
            ethers.AbiCoder.defaultAbiCoder().encode(
                ['uint256', 'uint256', 'uint256'],
                [0, 0, 1]
            )
        const result = await instance.decodeLeafData(
            encodedTokenTableMerkleDistributorData
        )
        console.log(result)
    })

    it('should set root correctly', async () => {
        const tx = await instance.setRoot(merkleRoot, 1)
        await expect(tx).to.emit(instance, 'RootSet')
    })
})
